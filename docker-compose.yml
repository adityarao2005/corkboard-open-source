services:
  # PostgreSQL Database
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespw
      POSTGRES_DB: corkboard
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/initdb:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - corkboard-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: corkboard
      DB_USER: postgres
      DB_PASSWORD: postgrespw
      PORT: 3000
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s
    networks:
      - corkboard-network

  # Frontend (Next.js)
  frontend:
    build:
      context: ./web-frontend
      dockerfile: Dockerfile
    restart: always
    environment:
      # For client-side fetches (browser)
      NEXT_PUBLIC_API_URL: http://localhost/api
      # For server-side rendering (container-to-container)
      API_URL: http://backend:3000
      PORT: 3001
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - corkboard-network

  # Nginx Gateway (Reverse Proxy)
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    restart: always
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - corkboard-network

volumes:
  postgres-data:

networks:
  corkboard-network:
    driver: bridge
